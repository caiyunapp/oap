// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/ringsaturn/go/pkg/mod/github.com/philchia/agollo/v4@v4.1.4/client.go

// Package oap_test is a generated GoMock package.
package oap_test

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	agollo "github.com/philchia/agollo/v4"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetAllKeys mocks base method.
func (m *MockClient) GetAllKeys(opts ...agollo.OpOption) []string {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllKeys", varargs...)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetAllKeys indicates an expected call of GetAllKeys.
func (mr *MockClientMockRecorder) GetAllKeys(opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllKeys", reflect.TypeOf((*MockClient)(nil).GetAllKeys), opts...)
}

// GetContent mocks base method.
func (m *MockClient) GetContent(opts ...agollo.OpOption) string {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContent", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetContent indicates an expected call of GetContent.
func (mr *MockClientMockRecorder) GetContent(opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContent", reflect.TypeOf((*MockClient)(nil).GetContent), opts...)
}

// GetPropertiesContent mocks base method.
func (m *MockClient) GetPropertiesContent(opts ...agollo.OpOption) string {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPropertiesContent", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPropertiesContent indicates an expected call of GetPropertiesContent.
func (mr *MockClientMockRecorder) GetPropertiesContent(opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPropertiesContent", reflect.TypeOf((*MockClient)(nil).GetPropertiesContent), opts...)
}

// GetReleaseKey mocks base method.
func (m *MockClient) GetReleaseKey(opts ...agollo.OpOption) string {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReleaseKey", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetReleaseKey indicates an expected call of GetReleaseKey.
func (mr *MockClientMockRecorder) GetReleaseKey(opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReleaseKey", reflect.TypeOf((*MockClient)(nil).GetReleaseKey), opts...)
}

// GetString mocks base method.
func (m *MockClient) GetString(key string, opts ...agollo.OpOption) string {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetString", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetString indicates an expected call of GetString.
func (mr *MockClientMockRecorder) GetString(key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetString", reflect.TypeOf((*MockClient)(nil).GetString), varargs...)
}

// OnUpdate mocks base method.
func (m *MockClient) OnUpdate(arg0 func(*agollo.ChangeEvent)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnUpdate", arg0)
}

// OnUpdate indicates an expected call of OnUpdate.
func (mr *MockClientMockRecorder) OnUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnUpdate", reflect.TypeOf((*MockClient)(nil).OnUpdate), arg0)
}

// Start mocks base method.
func (m *MockClient) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockClientMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockClient)(nil).Start))
}

// Stop mocks base method.
func (m *MockClient) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockClientMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockClient)(nil).Stop))
}

// SubscribeToNamespaces mocks base method.
func (m *MockClient) SubscribeToNamespaces(namespaces ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range namespaces {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubscribeToNamespaces", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeToNamespaces indicates an expected call of SubscribeToNamespaces.
func (mr *MockClientMockRecorder) SubscribeToNamespaces(namespaces ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToNamespaces", reflect.TypeOf((*MockClient)(nil).SubscribeToNamespaces), namespaces...)
}
